plugins {
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java'
    id 'jacoco'
    id 'org.flywaydb.flyway' version '9.22.1'
}

group = 'mil.army.futures.starter'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    compileOnly("org.projectlombok:lombok:1.18.28")
    testImplementation("org.projectlombok:lombok:1.18.28")
    annotationProcessor("org.projectlombok:lombok:1.18.28")
    implementation 'org.hibernate:hibernate-validator:8.0.1.Final'
    implementation 'org.jsoup:jsoup:1.17.2'
}

tasks.register('installFrontend', Exec) {
    inputs.file("frontend/yarn.lock")
    inputs.file("frontend/package.json")
    outputs.dir("frontend/node_modules")

    workingDir "frontend"
    executable "yarn"
    args "install", "--update-checksums"
}

tasks.register('buildFrontend', Exec) {
    dependsOn installFrontend
    inputs.files(file("frontend").listFiles((file -> file.name != "build") as FileFilter))
    outputs.dir("frontend/build")

    workingDir "frontend"
    executable "yarn"
    args "build"
}

tasks.register('copyFrontend', Copy) {
    from "frontend/dist"
    into "${project.layout.buildDirectory.get().asFile.getAbsolutePath()}/resources/main/public"
    doLast {
        println "copied frontend artifacts to ${project.layout.buildDirectory.get().asFile.getAbsolutePath()}/resources/main/public"
    }
}

tasks.register('cleanFrontend', Delete) {
    delete "frontend/build", "${project.layout.buildDirectory.get().asFile.getAbsolutePath()}/resources/main/public"
    doLast {
        println "deleted frontend artifacts"
    }
}

bootRun {
    dependsOn copyFrontend
}

resolveMainClassName {
    dependsOn copyFrontend
}

jar {
    dependsOn copyFrontend
}

build {
    dependsOn copyFrontend
}

clean {
    dependsOn cleanFrontend
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

compileTestJava {
    dependsOn copyFrontend
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.getRequired().set(true)
    }
}


flyway {
    url = 'jdbc:postgresql://localhost:5433/bridge_db'
    user = 'bridge_dev'
    password = 'bridge_dev'
}
